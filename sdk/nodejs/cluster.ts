// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Initialize a new talos cluster: creates secrets and configure
 */
export class Cluster extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'talos-cluster:index:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The client configuration. Can be used for bootstraping and apply
     */
    public /*out*/ readonly clientConfiguration!: pulumi.Output<outputs.ClientConfiguration | undefined>;
    /**
     * The map of generated machines configurations. 
     * This is a unstructed string. Same as machine_configuration output in the TF provider
     */
    public /*out*/ readonly machineConfigurations!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterEndpoint'");
            }
            if ((!args || args.clusterMachines === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterMachines'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.talosVersionContract === undefined) && !opts.urn) {
                throw new Error("Missing required property 'talosVersionContract'");
            }
            resourceInputs["clusterEndpoint"] = args ? args.clusterEndpoint : undefined;
            resourceInputs["clusterMachines"] = args ? args.clusterMachines : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["talosVersionContract"] = args ? args.talosVersionContract : undefined;
            resourceInputs["clientConfiguration"] = undefined /*out*/;
            resourceInputs["machineConfigurations"] = undefined /*out*/;
        } else {
            resourceInputs["clientConfiguration"] = undefined /*out*/;
            resourceInputs["machineConfigurations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    clusterEndpoint: pulumi.Input<string>;
    /**
     * Configuration for machines
     */
    clusterMachines: pulumi.Input<pulumi.Input<inputs.ClusterMachinesArgs>[]>;
    clusterName: pulumi.Input<string>;
    talosVersionContract: pulumi.Input<string>;
}
