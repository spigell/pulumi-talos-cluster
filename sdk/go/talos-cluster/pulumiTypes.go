// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package taloscluster

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spigell/pulumi-talos-cluster/sdk/go/talos-cluster/internal"
)

var _ = internal.GetEnvOrDefault

type ApplyMachines struct {
	Controlplane []MachineInfo `pulumi:"controlplane"`
	Init         []MachineInfo `pulumi:"init"`
	Worker       []MachineInfo `pulumi:"worker"`
}

// ApplyMachinesInput is an input type that accepts ApplyMachinesArgs and ApplyMachinesOutput values.
// You can construct a concrete instance of `ApplyMachinesInput` via:
//
//	ApplyMachinesArgs{...}
type ApplyMachinesInput interface {
	pulumi.Input

	ToApplyMachinesOutput() ApplyMachinesOutput
	ToApplyMachinesOutputWithContext(context.Context) ApplyMachinesOutput
}

type ApplyMachinesArgs struct {
	Controlplane MachineInfoArrayInput `pulumi:"controlplane"`
	Init         MachineInfoArrayInput `pulumi:"init"`
	Worker       MachineInfoArrayInput `pulumi:"worker"`
}

func (ApplyMachinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplyMachines)(nil)).Elem()
}

func (i ApplyMachinesArgs) ToApplyMachinesOutput() ApplyMachinesOutput {
	return i.ToApplyMachinesOutputWithContext(context.Background())
}

func (i ApplyMachinesArgs) ToApplyMachinesOutputWithContext(ctx context.Context) ApplyMachinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyMachinesOutput)
}

type ApplyMachinesOutput struct{ *pulumi.OutputState }

func (ApplyMachinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplyMachines)(nil)).Elem()
}

func (o ApplyMachinesOutput) ToApplyMachinesOutput() ApplyMachinesOutput {
	return o
}

func (o ApplyMachinesOutput) ToApplyMachinesOutputWithContext(ctx context.Context) ApplyMachinesOutput {
	return o
}

func (o ApplyMachinesOutput) Controlplane() MachineInfoArrayOutput {
	return o.ApplyT(func(v ApplyMachines) []MachineInfo { return v.Controlplane }).(MachineInfoArrayOutput)
}

func (o ApplyMachinesOutput) Init() MachineInfoArrayOutput {
	return o.ApplyT(func(v ApplyMachines) []MachineInfo { return v.Init }).(MachineInfoArrayOutput)
}

func (o ApplyMachinesOutput) Worker() MachineInfoArrayOutput {
	return o.ApplyT(func(v ApplyMachines) []MachineInfo { return v.Worker }).(MachineInfoArrayOutput)
}

type ClientConfiguration struct {
	// The Certificate Authority (CA) certificate used to verify connections to the Talos API server.
	CaCertificate *string `pulumi:"caCertificate"`
	// The client certificate used to authenticate to the Talos API server.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The private key for the client certificate, used for authenticating the client to the Talos API server.
	ClientKey *string `pulumi:"clientKey"`
}

// ClientConfigurationInput is an input type that accepts ClientConfigurationArgs and ClientConfigurationOutput values.
// You can construct a concrete instance of `ClientConfigurationInput` via:
//
//	ClientConfigurationArgs{...}
type ClientConfigurationInput interface {
	pulumi.Input

	ToClientConfigurationOutput() ClientConfigurationOutput
	ToClientConfigurationOutputWithContext(context.Context) ClientConfigurationOutput
}

type ClientConfigurationArgs struct {
	// The Certificate Authority (CA) certificate used to verify connections to the Talos API server.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// The client certificate used to authenticate to the Talos API server.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The private key for the client certificate, used for authenticating the client to the Talos API server.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
}

func (ClientConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientConfiguration)(nil)).Elem()
}

func (i ClientConfigurationArgs) ToClientConfigurationOutput() ClientConfigurationOutput {
	return i.ToClientConfigurationOutputWithContext(context.Background())
}

func (i ClientConfigurationArgs) ToClientConfigurationOutputWithContext(ctx context.Context) ClientConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientConfigurationOutput)
}

type ClientConfigurationOutput struct{ *pulumi.OutputState }

func (ClientConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientConfiguration)(nil)).Elem()
}

func (o ClientConfigurationOutput) ToClientConfigurationOutput() ClientConfigurationOutput {
	return o
}

func (o ClientConfigurationOutput) ToClientConfigurationOutputWithContext(ctx context.Context) ClientConfigurationOutput {
	return o
}

// The Certificate Authority (CA) certificate used to verify connections to the Talos API server.
func (o ClientConfigurationOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientConfiguration) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// The client certificate used to authenticate to the Talos API server.
func (o ClientConfigurationOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientConfiguration) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The private key for the client certificate, used for authenticating the client to the Talos API server.
func (o ClientConfigurationOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientConfiguration) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

type ClusterMachines struct {
	// User-provided machine configuration to apply.
	// Must be a valid array of YAML strings.
	// For structure, see https://www.talos.dev/latest/reference/configuration/v1alpha1/config/
	ConfigPatches []string `pulumi:"configPatches"`
	// ID or name of the machine.
	MachineId string `pulumi:"machineId"`
	// Type of the machine.
	MachineType MachineTypes `pulumi:"machineType"`
	// The IP address of the node where configuration will be applied.
	NodeIp string `pulumi:"nodeIp"`
	// Talos OS installation image.
	// Used in the `install` configuration and set via CLI.
	// The default is generated based on the Talos machinery version, current: ghcr.io/siderolabs/installer:v1.10.5.
	TalosImage *string `pulumi:"talosImage"`
}

// Defaults sets the appropriate defaults for ClusterMachines
func (val *ClusterMachines) Defaults() *ClusterMachines {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TalosImage == nil {
		talosImage_ := "ghcr.io/siderolabs/installer:v1.10.5"
		tmp.TalosImage = &talosImage_
	}
	return &tmp
}

// ClusterMachinesInput is an input type that accepts ClusterMachinesArgs and ClusterMachinesOutput values.
// You can construct a concrete instance of `ClusterMachinesInput` via:
//
//	ClusterMachinesArgs{...}
type ClusterMachinesInput interface {
	pulumi.Input

	ToClusterMachinesOutput() ClusterMachinesOutput
	ToClusterMachinesOutputWithContext(context.Context) ClusterMachinesOutput
}

type ClusterMachinesArgs struct {
	// User-provided machine configuration to apply.
	// Must be a valid array of YAML strings.
	// For structure, see https://www.talos.dev/latest/reference/configuration/v1alpha1/config/
	ConfigPatches pulumi.StringArrayInput `pulumi:"configPatches"`
	// ID or name of the machine.
	MachineId string `pulumi:"machineId"`
	// Type of the machine.
	MachineType MachineTypes `pulumi:"machineType"`
	// The IP address of the node where configuration will be applied.
	NodeIp pulumi.StringInput `pulumi:"nodeIp"`
	// Talos OS installation image.
	// Used in the `install` configuration and set via CLI.
	// The default is generated based on the Talos machinery version, current: ghcr.io/siderolabs/installer:v1.10.5.
	TalosImage pulumi.StringPtrInput `pulumi:"talosImage"`
}

// Defaults sets the appropriate defaults for ClusterMachinesArgs
func (val *ClusterMachinesArgs) Defaults() *ClusterMachinesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TalosImage == nil {
		tmp.TalosImage = pulumi.StringPtr("ghcr.io/siderolabs/installer:v1.10.5")
	}
	return &tmp
}
func (ClusterMachinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMachines)(nil)).Elem()
}

func (i ClusterMachinesArgs) ToClusterMachinesOutput() ClusterMachinesOutput {
	return i.ToClusterMachinesOutputWithContext(context.Background())
}

func (i ClusterMachinesArgs) ToClusterMachinesOutputWithContext(ctx context.Context) ClusterMachinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMachinesOutput)
}

// ClusterMachinesArrayInput is an input type that accepts ClusterMachinesArray and ClusterMachinesArrayOutput values.
// You can construct a concrete instance of `ClusterMachinesArrayInput` via:
//
//	ClusterMachinesArray{ ClusterMachinesArgs{...} }
type ClusterMachinesArrayInput interface {
	pulumi.Input

	ToClusterMachinesArrayOutput() ClusterMachinesArrayOutput
	ToClusterMachinesArrayOutputWithContext(context.Context) ClusterMachinesArrayOutput
}

type ClusterMachinesArray []ClusterMachinesInput

func (ClusterMachinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMachines)(nil)).Elem()
}

func (i ClusterMachinesArray) ToClusterMachinesArrayOutput() ClusterMachinesArrayOutput {
	return i.ToClusterMachinesArrayOutputWithContext(context.Background())
}

func (i ClusterMachinesArray) ToClusterMachinesArrayOutputWithContext(ctx context.Context) ClusterMachinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMachinesArrayOutput)
}

type ClusterMachinesOutput struct{ *pulumi.OutputState }

func (ClusterMachinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMachines)(nil)).Elem()
}

func (o ClusterMachinesOutput) ToClusterMachinesOutput() ClusterMachinesOutput {
	return o
}

func (o ClusterMachinesOutput) ToClusterMachinesOutputWithContext(ctx context.Context) ClusterMachinesOutput {
	return o
}

// User-provided machine configuration to apply.
// Must be a valid array of YAML strings.
// For structure, see https://www.talos.dev/latest/reference/configuration/v1alpha1/config/
func (o ClusterMachinesOutput) ConfigPatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterMachines) []string { return v.ConfigPatches }).(pulumi.StringArrayOutput)
}

// ID or name of the machine.
func (o ClusterMachinesOutput) MachineId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMachines) string { return v.MachineId }).(pulumi.StringOutput)
}

// Type of the machine.
func (o ClusterMachinesOutput) MachineType() MachineTypesOutput {
	return o.ApplyT(func(v ClusterMachines) MachineTypes { return v.MachineType }).(MachineTypesOutput)
}

// The IP address of the node where configuration will be applied.
func (o ClusterMachinesOutput) NodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMachines) string { return v.NodeIp }).(pulumi.StringOutput)
}

// Talos OS installation image.
// Used in the `install` configuration and set via CLI.
// The default is generated based on the Talos machinery version, current: ghcr.io/siderolabs/installer:v1.10.5.
func (o ClusterMachinesOutput) TalosImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterMachines) *string { return v.TalosImage }).(pulumi.StringPtrOutput)
}

type ClusterMachinesArrayOutput struct{ *pulumi.OutputState }

func (ClusterMachinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMachines)(nil)).Elem()
}

func (o ClusterMachinesArrayOutput) ToClusterMachinesArrayOutput() ClusterMachinesArrayOutput {
	return o
}

func (o ClusterMachinesArrayOutput) ToClusterMachinesArrayOutputWithContext(ctx context.Context) ClusterMachinesArrayOutput {
	return o
}

func (o ClusterMachinesArrayOutput) Index(i pulumi.IntInput) ClusterMachinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterMachines {
		return vs[0].([]ClusterMachines)[vs[1].(int)]
	}).(ClusterMachinesOutput)
}

type Credentials struct {
	// The Kubeconfig for cluster
	Kubeconfig string `pulumi:"kubeconfig"`
	// The talosconfig with all nodes and controlplanes as endpoints
	Talosconfig string `pulumi:"talosconfig"`
}

type CredentialsOutput struct{ *pulumi.OutputState }

func (CredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Credentials)(nil)).Elem()
}

func (o CredentialsOutput) ToCredentialsOutput() CredentialsOutput {
	return o
}

func (o CredentialsOutput) ToCredentialsOutputWithContext(ctx context.Context) CredentialsOutput {
	return o
}

// The Kubeconfig for cluster
func (o CredentialsOutput) Kubeconfig() pulumi.StringOutput {
	return o.ApplyT(func(v Credentials) string { return v.Kubeconfig }).(pulumi.StringOutput)
}

// The talosconfig with all nodes and controlplanes as endpoints
func (o CredentialsOutput) Talosconfig() pulumi.StringOutput {
	return o.ApplyT(func(v Credentials) string { return v.Talosconfig }).(pulumi.StringOutput)
}

type MachineInfo struct {
	// cluster endpoint applied to node
	ClusterEndpoint *string `pulumi:"clusterEndpoint"`
	// Configuration settings for machines to apply.
	// This can be retrieved from the cluster resource.
	Configuration string `pulumi:"configuration"`
	// TO DO
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// ID or name of the machine.
	MachineId string `pulumi:"machineId"`
	// The IP address of the node where configuration will be applied.
	NodeIp string `pulumi:"nodeIp"`
	// TO DO
	TalosImage *string `pulumi:"talosImage"`
	// User-provided machine configuration to apply.
	// This can be retrieved from the cluster resource.
	UserConfigPatches *string `pulumi:"userConfigPatches"`
}

// MachineInfoInput is an input type that accepts MachineInfoArgs and MachineInfoOutput values.
// You can construct a concrete instance of `MachineInfoInput` via:
//
//	MachineInfoArgs{...}
type MachineInfoInput interface {
	pulumi.Input

	ToMachineInfoOutput() MachineInfoOutput
	ToMachineInfoOutputWithContext(context.Context) MachineInfoOutput
}

type MachineInfoArgs struct {
	// cluster endpoint applied to node
	ClusterEndpoint pulumi.StringPtrInput `pulumi:"clusterEndpoint"`
	// Configuration settings for machines to apply.
	// This can be retrieved from the cluster resource.
	Configuration pulumi.StringInput `pulumi:"configuration"`
	// TO DO
	KubernetesVersion pulumi.StringPtrInput `pulumi:"kubernetesVersion"`
	// ID or name of the machine.
	MachineId pulumi.StringInput `pulumi:"machineId"`
	// The IP address of the node where configuration will be applied.
	NodeIp pulumi.StringInput `pulumi:"nodeIp"`
	// TO DO
	TalosImage pulumi.StringPtrInput `pulumi:"talosImage"`
	// User-provided machine configuration to apply.
	// This can be retrieved from the cluster resource.
	UserConfigPatches pulumi.StringPtrInput `pulumi:"userConfigPatches"`
}

func (MachineInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInfo)(nil)).Elem()
}

func (i MachineInfoArgs) ToMachineInfoOutput() MachineInfoOutput {
	return i.ToMachineInfoOutputWithContext(context.Background())
}

func (i MachineInfoArgs) ToMachineInfoOutputWithContext(ctx context.Context) MachineInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInfoOutput)
}

// MachineInfoArrayInput is an input type that accepts MachineInfoArray and MachineInfoArrayOutput values.
// You can construct a concrete instance of `MachineInfoArrayInput` via:
//
//	MachineInfoArray{ MachineInfoArgs{...} }
type MachineInfoArrayInput interface {
	pulumi.Input

	ToMachineInfoArrayOutput() MachineInfoArrayOutput
	ToMachineInfoArrayOutputWithContext(context.Context) MachineInfoArrayOutput
}

type MachineInfoArray []MachineInfoInput

func (MachineInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineInfo)(nil)).Elem()
}

func (i MachineInfoArray) ToMachineInfoArrayOutput() MachineInfoArrayOutput {
	return i.ToMachineInfoArrayOutputWithContext(context.Background())
}

func (i MachineInfoArray) ToMachineInfoArrayOutputWithContext(ctx context.Context) MachineInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInfoArrayOutput)
}

type MachineInfoOutput struct{ *pulumi.OutputState }

func (MachineInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInfo)(nil)).Elem()
}

func (o MachineInfoOutput) ToMachineInfoOutput() MachineInfoOutput {
	return o
}

func (o MachineInfoOutput) ToMachineInfoOutputWithContext(ctx context.Context) MachineInfoOutput {
	return o
}

// cluster endpoint applied to node
func (o MachineInfoOutput) ClusterEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInfo) *string { return v.ClusterEndpoint }).(pulumi.StringPtrOutput)
}

// Configuration settings for machines to apply.
// This can be retrieved from the cluster resource.
func (o MachineInfoOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInfo) string { return v.Configuration }).(pulumi.StringOutput)
}

// TO DO
func (o MachineInfoOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInfo) *string { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// ID or name of the machine.
func (o MachineInfoOutput) MachineId() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInfo) string { return v.MachineId }).(pulumi.StringOutput)
}

// The IP address of the node where configuration will be applied.
func (o MachineInfoOutput) NodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInfo) string { return v.NodeIp }).(pulumi.StringOutput)
}

// TO DO
func (o MachineInfoOutput) TalosImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInfo) *string { return v.TalosImage }).(pulumi.StringPtrOutput)
}

// User-provided machine configuration to apply.
// This can be retrieved from the cluster resource.
func (o MachineInfoOutput) UserConfigPatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInfo) *string { return v.UserConfigPatches }).(pulumi.StringPtrOutput)
}

type MachineInfoArrayOutput struct{ *pulumi.OutputState }

func (MachineInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineInfo)(nil)).Elem()
}

func (o MachineInfoArrayOutput) ToMachineInfoArrayOutput() MachineInfoArrayOutput {
	return o
}

func (o MachineInfoArrayOutput) ToMachineInfoArrayOutputWithContext(ctx context.Context) MachineInfoArrayOutput {
	return o
}

func (o MachineInfoArrayOutput) Index(i pulumi.IntInput) MachineInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineInfo {
		return vs[0].([]MachineInfo)[vs[1].(int)]
	}).(MachineInfoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyMachinesInput)(nil)).Elem(), ApplyMachinesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientConfigurationInput)(nil)).Elem(), ClientConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMachinesInput)(nil)).Elem(), ClusterMachinesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMachinesArrayInput)(nil)).Elem(), ClusterMachinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineInfoInput)(nil)).Elem(), MachineInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineInfoArrayInput)(nil)).Elem(), MachineInfoArray{})
	pulumi.RegisterOutputType(ApplyMachinesOutput{})
	pulumi.RegisterOutputType(ClientConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterMachinesOutput{})
	pulumi.RegisterOutputType(ClusterMachinesArrayOutput{})
	pulumi.RegisterOutputType(CredentialsOutput{})
	pulumi.RegisterOutputType(MachineInfoOutput{})
	pulumi.RegisterOutputType(MachineInfoArrayOutput{})
}
