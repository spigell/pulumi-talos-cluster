// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.TalosCluster
{
    /// <summary>
    /// Apply the configuration to nodes.
    /// </summary>
    [TalosClusterResourceType("talos-cluster:index:Apply")]
    public partial class Apply : global::Pulumi.ComponentResource
    {
        [Output("credentials")]
        public Output<Outputs.Credentials> Credentials { get; private set; } = null!;


        /// <summary>
        /// Create a Apply resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Apply(string name, ApplyArgs args, ComponentResourceOptions? options = null)
            : base("talos-cluster:index:Apply", name, args ?? new ApplyArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/spigell/pulumi-talos-cluster",
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ApplyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The machine configurations to apply.
        /// </summary>
        [Input("applyMachines", required: true)]
        public Input<Inputs.ApplyMachinesArgs> ApplyMachines { get; set; } = null!;

        /// <summary>
        /// Client configuration for bootstrapping and applying resources.
        /// </summary>
        [Input("clientConfiguration", required: true)]
        public Input<Inputs.ClientConfigurationArgs> ClientConfiguration { get; set; } = null!;

        /// <summary>
        /// skipInitApply indicates that machines will be managed or configured by external tools. 
        /// For example, it can serve as a source for userdata in cloud provider setups. 
        /// This option helps accelerate node provisioning. 
        /// Default is false.
        /// </summary>
        [Input("skipInitApply")]
        public Input<bool>? SkipInitApply { get; set; }

        public ApplyArgs()
        {
            SkipInitApply = false;
        }
        public static new ApplyArgs Empty => new ApplyArgs();
    }
}
