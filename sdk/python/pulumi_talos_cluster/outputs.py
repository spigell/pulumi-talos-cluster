# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApplyMachines',
    'ClientConfiguration',
    'Credentials',
    'MachineInfo',
]

@pulumi.output_type
class ApplyMachines(dict):
    def __init__(__self__, *,
                 init: Sequence['outputs.MachineInfo'],
                 controlplane: Optional[Sequence['outputs.MachineInfo']] = None,
                 worker: Optional[Sequence['outputs.MachineInfo']] = None):
        pulumi.set(__self__, "init", init)
        if controlplane is not None:
            pulumi.set(__self__, "controlplane", controlplane)
        if worker is not None:
            pulumi.set(__self__, "worker", worker)

    @_builtins.property
    @pulumi.getter
    def init(self) -> Sequence['outputs.MachineInfo']:
        return pulumi.get(self, "init")

    @_builtins.property
    @pulumi.getter
    def controlplane(self) -> Optional[Sequence['outputs.MachineInfo']]:
        return pulumi.get(self, "controlplane")

    @_builtins.property
    @pulumi.getter
    def worker(self) -> Optional[Sequence['outputs.MachineInfo']]:
        return pulumi.get(self, "worker")


@pulumi.output_type
class ClientConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[_builtins.str] = None,
                 client_certificate: Optional[_builtins.str] = None,
                 client_key: Optional[_builtins.str] = None):
        """
        :param _builtins.str ca_certificate: The Certificate Authority (CA) certificate used to verify connections to the Talos API server.
        :param _builtins.str client_certificate: The client certificate used to authenticate to the Talos API server.
        :param _builtins.str client_key: The private key for the client certificate, used for authenticating the client to the Talos API server.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)

    @_builtins.property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[_builtins.str]:
        """
        The Certificate Authority (CA) certificate used to verify connections to the Talos API server.
        """
        return pulumi.get(self, "ca_certificate")

    @_builtins.property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[_builtins.str]:
        """
        The client certificate used to authenticate to the Talos API server.
        """
        return pulumi.get(self, "client_certificate")

    @_builtins.property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[_builtins.str]:
        """
        The private key for the client certificate, used for authenticating the client to the Talos API server.
        """
        return pulumi.get(self, "client_key")


@pulumi.output_type
class Credentials(dict):
    def __init__(__self__, *,
                 kubeconfig: _builtins.str,
                 talosconfig: _builtins.str):
        """
        :param _builtins.str kubeconfig: The Kubeconfig for cluster
        :param _builtins.str talosconfig: The talosconfig with all nodes and controlplanes as endpoints
        """
        pulumi.set(__self__, "kubeconfig", kubeconfig)
        pulumi.set(__self__, "talosconfig", talosconfig)

    @_builtins.property
    @pulumi.getter
    def kubeconfig(self) -> _builtins.str:
        """
        The Kubeconfig for cluster
        """
        return pulumi.get(self, "kubeconfig")

    @_builtins.property
    @pulumi.getter
    def talosconfig(self) -> _builtins.str:
        """
        The talosconfig with all nodes and controlplanes as endpoints
        """
        return pulumi.get(self, "talosconfig")


@pulumi.output_type
class MachineInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "machineId":
            suggest = "machine_id"
        elif key == "nodeIp":
            suggest = "node_ip"
        elif key == "clusterEndpoint":
            suggest = "cluster_endpoint"
        elif key == "kubernetesVersion":
            suggest = "kubernetes_version"
        elif key == "talosImage":
            suggest = "talos_image"
        elif key == "userConfigPatches":
            suggest = "user_config_patches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration: _builtins.str,
                 machine_id: _builtins.str,
                 node_ip: _builtins.str,
                 cluster_endpoint: Optional[_builtins.str] = None,
                 kubernetes_version: Optional[_builtins.str] = None,
                 talos_image: Optional[_builtins.str] = None,
                 user_config_patches: Optional[_builtins.str] = None):
        """
        :param _builtins.str configuration: Configuration settings for machines to apply. 
               This can be retrieved from the cluster resource.
        :param _builtins.str machine_id: ID or name of the machine.
        :param _builtins.str node_ip: The IP address of the node where configuration will be applied.
        :param _builtins.str cluster_endpoint: cluster endpoint applied to node
        :param _builtins.str kubernetes_version: Kubernetes version to install or upgrade on the node.
        :param _builtins.str talos_image: Talos OS image to install or upgrade on the node.
        :param _builtins.str user_config_patches: User-provided machine configuration to apply. 
               This can be retrieved from the cluster resource.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "machine_id", machine_id)
        pulumi.set(__self__, "node_ip", node_ip)
        if cluster_endpoint is not None:
            pulumi.set(__self__, "cluster_endpoint", cluster_endpoint)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if talos_image is not None:
            pulumi.set(__self__, "talos_image", talos_image)
        if user_config_patches is not None:
            pulumi.set(__self__, "user_config_patches", user_config_patches)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> _builtins.str:
        """
        Configuration settings for machines to apply. 
        This can be retrieved from the cluster resource.
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> _builtins.str:
        """
        ID or name of the machine.
        """
        return pulumi.get(self, "machine_id")

    @_builtins.property
    @pulumi.getter(name="nodeIp")
    def node_ip(self) -> _builtins.str:
        """
        The IP address of the node where configuration will be applied.
        """
        return pulumi.get(self, "node_ip")

    @_builtins.property
    @pulumi.getter(name="clusterEndpoint")
    def cluster_endpoint(self) -> Optional[_builtins.str]:
        """
        cluster endpoint applied to node
        """
        return pulumi.get(self, "cluster_endpoint")

    @_builtins.property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[_builtins.str]:
        """
        Kubernetes version to install or upgrade on the node.
        """
        return pulumi.get(self, "kubernetes_version")

    @_builtins.property
    @pulumi.getter(name="talosImage")
    def talos_image(self) -> Optional[_builtins.str]:
        """
        Talos OS image to install or upgrade on the node.
        """
        return pulumi.get(self, "talos_image")

    @_builtins.property
    @pulumi.getter(name="userConfigPatches")
    def user_config_patches(self) -> Optional[_builtins.str]:
        """
        User-provided machine configuration to apply. 
        This can be retrieved from the cluster resource.
        """
        return pulumi.get(self, "user_config_patches")


