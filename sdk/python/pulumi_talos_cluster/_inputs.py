# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._enums import *

__all__ = [
    'ApplyMachinesArgs',
    'ApplyMachinesArgsDict',
    'ClientConfigurationArgs',
    'ClientConfigurationArgsDict',
    'ClusterMachinesArgs',
    'ClusterMachinesArgsDict',
    'MachineInfoArgs',
    'MachineInfoArgsDict',
]

MYPY = False

if not MYPY:
    class ApplyMachinesArgsDict(TypedDict):
        init: pulumi.Input[Sequence[pulumi.Input['MachineInfoArgsDict']]]
        controlplane: NotRequired[pulumi.Input[Sequence[pulumi.Input['MachineInfoArgsDict']]]]
        worker: NotRequired[pulumi.Input[Sequence[pulumi.Input['MachineInfoArgsDict']]]]
elif False:
    ApplyMachinesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplyMachinesArgs:
    def __init__(__self__, *,
                 init: pulumi.Input[Sequence[pulumi.Input['MachineInfoArgs']]],
                 controlplane: Optional[pulumi.Input[Sequence[pulumi.Input['MachineInfoArgs']]]] = None,
                 worker: Optional[pulumi.Input[Sequence[pulumi.Input['MachineInfoArgs']]]] = None):
        pulumi.set(__self__, "init", init)
        if controlplane is not None:
            pulumi.set(__self__, "controlplane", controlplane)
        if worker is not None:
            pulumi.set(__self__, "worker", worker)

    @property
    @pulumi.getter
    def init(self) -> pulumi.Input[Sequence[pulumi.Input['MachineInfoArgs']]]:
        return pulumi.get(self, "init")

    @init.setter
    def init(self, value: pulumi.Input[Sequence[pulumi.Input['MachineInfoArgs']]]):
        pulumi.set(self, "init", value)

    @property
    @pulumi.getter
    def controlplane(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MachineInfoArgs']]]]:
        return pulumi.get(self, "controlplane")

    @controlplane.setter
    def controlplane(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MachineInfoArgs']]]]):
        pulumi.set(self, "controlplane", value)

    @property
    @pulumi.getter
    def worker(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MachineInfoArgs']]]]:
        return pulumi.get(self, "worker")

    @worker.setter
    def worker(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MachineInfoArgs']]]]):
        pulumi.set(self, "worker", value)


if not MYPY:
    class ClientConfigurationArgsDict(TypedDict):
        ca_certificate: NotRequired[pulumi.Input[builtins.str]]
        """
        The Certificate Authority (CA) certificate used to verify connections to the Talos API server.
        """
        client_certificate: NotRequired[pulumi.Input[builtins.str]]
        """
        The client certificate used to authenticate to the Talos API server.
        """
        client_key: NotRequired[pulumi.Input[builtins.str]]
        """
        The private key for the client certificate, used for authenticating the client to the Talos API server.
        """
elif False:
    ClientConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClientConfigurationArgs:
    def __init__(__self__, *,
                 ca_certificate: Optional[pulumi.Input[builtins.str]] = None,
                 client_certificate: Optional[pulumi.Input[builtins.str]] = None,
                 client_key: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] ca_certificate: The Certificate Authority (CA) certificate used to verify connections to the Talos API server.
        :param pulumi.Input[builtins.str] client_certificate: The client certificate used to authenticate to the Talos API server.
        :param pulumi.Input[builtins.str] client_key: The private key for the client certificate, used for authenticating the client to the Talos API server.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Certificate Authority (CA) certificate used to verify connections to the Talos API server.
        """
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The client certificate used to authenticate to the Talos API server.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The private key for the client certificate, used for authenticating the client to the Talos API server.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_key", value)


if not MYPY:
    class ClusterMachinesArgsDict(TypedDict):
        machine_id: builtins.str
        """
        ID or name of the machine.
        """
        machine_type: 'MachineTypes'
        """
        Type of the machine.
        """
        node_ip: pulumi.Input[builtins.str]
        """
        The IP address of the node where configuration will be applied.
        """
        config_patches: NotRequired[pulumi.Input[builtins.str]]
        """
        User-provided machine configuration to apply. 
        Must be a valid YAML string. 
        For structure, see https://www.talos.dev/latest/reference/configuration/v1alpha1/config/
        """
        talos_image: NotRequired[pulumi.Input[builtins.str]]
        """
        Talos OS installation image. 
        Used in the `install` configuration and set via CLI. 
        The default is generated based on the Talos machinery version, current: ghcr.io/siderolabs/installer:v1.9.5.
        """
elif False:
    ClusterMachinesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterMachinesArgs:
    def __init__(__self__, *,
                 machine_id: builtins.str,
                 machine_type: 'MachineTypes',
                 node_ip: pulumi.Input[builtins.str],
                 config_patches: Optional[pulumi.Input[builtins.str]] = None,
                 talos_image: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param builtins.str machine_id: ID or name of the machine.
        :param 'MachineTypes' machine_type: Type of the machine.
        :param pulumi.Input[builtins.str] node_ip: The IP address of the node where configuration will be applied.
        :param pulumi.Input[builtins.str] config_patches: User-provided machine configuration to apply. 
               Must be a valid YAML string. 
               For structure, see https://www.talos.dev/latest/reference/configuration/v1alpha1/config/
        :param pulumi.Input[builtins.str] talos_image: Talos OS installation image. 
               Used in the `install` configuration and set via CLI. 
               The default is generated based on the Talos machinery version, current: ghcr.io/siderolabs/installer:v1.9.5.
        """
        pulumi.set(__self__, "machine_id", machine_id)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "node_ip", node_ip)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if talos_image is None:
            talos_image = 'ghcr.io/siderolabs/installer:v1.9.5'
        if talos_image is not None:
            pulumi.set(__self__, "talos_image", talos_image)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> builtins.str:
        """
        ID or name of the machine.
        """
        return pulumi.get(self, "machine_id")

    @machine_id.setter
    def machine_id(self, value: builtins.str):
        pulumi.set(self, "machine_id", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> 'MachineTypes':
        """
        Type of the machine.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: 'MachineTypes'):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="nodeIp")
    def node_ip(self) -> pulumi.Input[builtins.str]:
        """
        The IP address of the node where configuration will be applied.
        """
        return pulumi.get(self, "node_ip")

    @node_ip.setter
    def node_ip(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "node_ip", value)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        User-provided machine configuration to apply. 
        Must be a valid YAML string. 
        For structure, see https://www.talos.dev/latest/reference/configuration/v1alpha1/config/
        """
        return pulumi.get(self, "config_patches")

    @config_patches.setter
    def config_patches(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "config_patches", value)

    @property
    @pulumi.getter(name="talosImage")
    def talos_image(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Talos OS installation image. 
        Used in the `install` configuration and set via CLI. 
        The default is generated based on the Talos machinery version, current: ghcr.io/siderolabs/installer:v1.9.5.
        """
        return pulumi.get(self, "talos_image")

    @talos_image.setter
    def talos_image(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "talos_image", value)


if not MYPY:
    class MachineInfoArgsDict(TypedDict):
        configuration: pulumi.Input[builtins.str]
        """
        Configuration settings for machines to apply. 
        This can be retrieved from the cluster resource.
        """
        machine_id: pulumi.Input[builtins.str]
        """
        ID or name of the machine.
        """
        node_ip: pulumi.Input[builtins.str]
        """
        The IP address of the node where configuration will be applied.
        """
        cluster_endpoint: NotRequired[pulumi.Input[builtins.str]]
        """
        cluster endpoint applied to node
        """
        kubernetes_version: NotRequired[pulumi.Input[builtins.str]]
        """
        TO DO
        """
        talos_image: NotRequired[pulumi.Input[builtins.str]]
        """
        TO DO
        """
        user_config_patches: NotRequired[pulumi.Input[builtins.str]]
        """
        User-provided machine configuration to apply. 
        This can be retrieved from the cluster resource.
        """
elif False:
    MachineInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MachineInfoArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input[builtins.str],
                 machine_id: pulumi.Input[builtins.str],
                 node_ip: pulumi.Input[builtins.str],
                 cluster_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 kubernetes_version: Optional[pulumi.Input[builtins.str]] = None,
                 talos_image: Optional[pulumi.Input[builtins.str]] = None,
                 user_config_patches: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] configuration: Configuration settings for machines to apply. 
               This can be retrieved from the cluster resource.
        :param pulumi.Input[builtins.str] machine_id: ID or name of the machine.
        :param pulumi.Input[builtins.str] node_ip: The IP address of the node where configuration will be applied.
        :param pulumi.Input[builtins.str] cluster_endpoint: cluster endpoint applied to node
        :param pulumi.Input[builtins.str] kubernetes_version: TO DO
        :param pulumi.Input[builtins.str] talos_image: TO DO
        :param pulumi.Input[builtins.str] user_config_patches: User-provided machine configuration to apply. 
               This can be retrieved from the cluster resource.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "machine_id", machine_id)
        pulumi.set(__self__, "node_ip", node_ip)
        if cluster_endpoint is not None:
            pulumi.set(__self__, "cluster_endpoint", cluster_endpoint)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if talos_image is not None:
            pulumi.set(__self__, "talos_image", talos_image)
        if user_config_patches is not None:
            pulumi.set(__self__, "user_config_patches", user_config_patches)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input[builtins.str]:
        """
        Configuration settings for machines to apply. 
        This can be retrieved from the cluster resource.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> pulumi.Input[builtins.str]:
        """
        ID or name of the machine.
        """
        return pulumi.get(self, "machine_id")

    @machine_id.setter
    def machine_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "machine_id", value)

    @property
    @pulumi.getter(name="nodeIp")
    def node_ip(self) -> pulumi.Input[builtins.str]:
        """
        The IP address of the node where configuration will be applied.
        """
        return pulumi.get(self, "node_ip")

    @node_ip.setter
    def node_ip(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "node_ip", value)

    @property
    @pulumi.getter(name="clusterEndpoint")
    def cluster_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        cluster endpoint applied to node
        """
        return pulumi.get(self, "cluster_endpoint")

    @cluster_endpoint.setter
    def cluster_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_endpoint", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        TO DO
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="talosImage")
    def talos_image(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        TO DO
        """
        return pulumi.get(self, "talos_image")

    @talos_image.setter
    def talos_image(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "talos_image", value)

    @property
    @pulumi.getter(name="userConfigPatches")
    def user_config_patches(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        User-provided machine configuration to apply. 
        This can be retrieved from the cluster resource.
        """
        return pulumi.get(self, "user_config_patches")

    @user_config_patches.setter
    def user_config_patches(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_config_patches", value)


