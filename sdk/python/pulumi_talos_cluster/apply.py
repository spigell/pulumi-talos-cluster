# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplyArgs', 'Apply']

@pulumi.input_type
class ApplyArgs:
    def __init__(__self__, *,
                 apply_machines: pulumi.Input['ApplyMachinesArgs'],
                 client_configuration: pulumi.Input['ClientConfigurationArgs'],
                 skip_init_apply: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a Apply resource.
        :param pulumi.Input['ApplyMachinesArgs'] apply_machines: The machine configurations to apply.
        :param pulumi.Input['ClientConfigurationArgs'] client_configuration: Client configuration for bootstrapping and applying resources.
        :param pulumi.Input[builtins.bool] skip_init_apply: skipInitApply indicates that machines will be managed or configured by external tools. 
               For example, it can serve as a source for userdata in cloud provider setups. 
               This option helps accelerate node provisioning. 
               Default is false.
        """
        pulumi.set(__self__, "apply_machines", apply_machines)
        pulumi.set(__self__, "client_configuration", client_configuration)
        if skip_init_apply is None:
            skip_init_apply = False
        if skip_init_apply is not None:
            pulumi.set(__self__, "skip_init_apply", skip_init_apply)

    @property
    @pulumi.getter(name="applyMachines")
    def apply_machines(self) -> pulumi.Input['ApplyMachinesArgs']:
        """
        The machine configurations to apply.
        """
        return pulumi.get(self, "apply_machines")

    @apply_machines.setter
    def apply_machines(self, value: pulumi.Input['ApplyMachinesArgs']):
        pulumi.set(self, "apply_machines", value)

    @property
    @pulumi.getter(name="clientConfiguration")
    def client_configuration(self) -> pulumi.Input['ClientConfigurationArgs']:
        """
        Client configuration for bootstrapping and applying resources.
        """
        return pulumi.get(self, "client_configuration")

    @client_configuration.setter
    def client_configuration(self, value: pulumi.Input['ClientConfigurationArgs']):
        pulumi.set(self, "client_configuration", value)

    @property
    @pulumi.getter(name="skipInitApply")
    def skip_init_apply(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        skipInitApply indicates that machines will be managed or configured by external tools. 
        For example, it can serve as a source for userdata in cloud provider setups. 
        This option helps accelerate node provisioning. 
        Default is false.
        """
        return pulumi.get(self, "skip_init_apply")

    @skip_init_apply.setter
    def skip_init_apply(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "skip_init_apply", value)


@pulumi.type_token("talos-cluster:index:Apply")
class Apply(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_machines: Optional[pulumi.Input[Union['ApplyMachinesArgs', 'ApplyMachinesArgsDict']]] = None,
                 client_configuration: Optional[pulumi.Input[Union['ClientConfigurationArgs', 'ClientConfigurationArgsDict']]] = None,
                 skip_init_apply: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Apply the configuration to nodes.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ApplyMachinesArgs', 'ApplyMachinesArgsDict']] apply_machines: The machine configurations to apply.
        :param pulumi.Input[Union['ClientConfigurationArgs', 'ClientConfigurationArgsDict']] client_configuration: Client configuration for bootstrapping and applying resources.
        :param pulumi.Input[builtins.bool] skip_init_apply: skipInitApply indicates that machines will be managed or configured by external tools. 
               For example, it can serve as a source for userdata in cloud provider setups. 
               This option helps accelerate node provisioning. 
               Default is false.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Apply the configuration to nodes.

        :param str resource_name: The name of the resource.
        :param ApplyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_machines: Optional[pulumi.Input[Union['ApplyMachinesArgs', 'ApplyMachinesArgsDict']]] = None,
                 client_configuration: Optional[pulumi.Input[Union['ClientConfigurationArgs', 'ClientConfigurationArgsDict']]] = None,
                 skip_init_apply: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplyArgs.__new__(ApplyArgs)

            if apply_machines is None and not opts.urn:
                raise TypeError("Missing required property 'apply_machines'")
            __props__.__dict__["apply_machines"] = apply_machines
            if client_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'client_configuration'")
            __props__.__dict__["client_configuration"] = client_configuration
            if skip_init_apply is None:
                skip_init_apply = False
            __props__.__dict__["skip_init_apply"] = skip_init_apply
            __props__.__dict__["credentials"] = None
        super(Apply, __self__).__init__(
            'talos-cluster:index:Apply',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output['outputs.Credentials']:
        return pulumi.get(self, "credentials")

